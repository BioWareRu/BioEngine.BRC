@using BioEngine.BRC.Core.Entities.Abstractions
@using BioEngine.BRC.Core.Entities
@using BioEngine.BRC.Admin.Extensions
@using System.Collections.ObjectModel
@using BioEngine.BRC.Core.Entities.Blocks
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject IJSRuntime JsRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService

<div id="blocks-@Item.Id">
    @foreach (var block in Blocks)
    {
        var className = $"block-form block-{block.GetEntityDescriptor().Key}";
        <div class="block-row" @key="block.Id">
            <div style="width:30px; text-align: center">
                <i class="@block.GetIcon()" style="color: #999;"></i>
            </div>
            <div style="flex: 1; padding: 0 10px;">
                <div class="card @className">
                    <div class="card-body">
                        <BlockForm Block="block"></BlockForm>
                    </div>
                </div>
            </div>
            <div class="block-controls">
                <BSButton Color="Color.Secondary" Size="Size.Small" IsDisabled="!CanMoveBlockUp(block)" OnClick="@(() => MoveBlockUp(block))">
                    <i class="fas fa-arrow-up"></i>
                </BSButton>
                <BSDropdown DropdownDirection="DropdownDirection.Left">
                    <BSDropdownToggle Size="Size.Small" Color="Color.Secondary">
                        <i class="fas fa-plus"></i>
                    </BSDropdownToggle>
                    <BSDropdownMenu>
                        @foreach (var descriptor in BRCEntitiesRegistrar.Instance().GetBlocks())
                        {
                            <BSDropdownItem OnClick="@(() => AddBlock(descriptor.Key, block, false))">
                                <i class="@descriptor.GetIcon()"></i> @descriptor.Title
                            </BSDropdownItem>                        }
                    </BSDropdownMenu>
                </BSDropdown>
                <BSButton Color="Color.Secondary" Size="Size.Small" OnClick="@(() => DeleteBlockAsync(block))">
                    <i class="fas fa-trash"></i>
                </BSButton>
                <BSDropdown DropdownDirection="DropdownDirection.Left">
                    <BSDropdownToggle Size="Size.Small" Color="Color.Secondary">
                        <i class="fas fa-plus"></i>
                    </BSDropdownToggle>
                    <BSDropdownMenu>
                        @foreach (var descriptor in BRCEntitiesRegistrar.Instance().GetBlocks())
                        {
                            <BSDropdownItem OnClick="@(() => AddBlock(descriptor.Key, block))">
                                <i class="@descriptor.GetIcon()"></i> @descriptor.Title
                            </BSDropdownItem>                        }
                    </BSDropdownMenu>
                </BSDropdown>
                <BSButton Color="Color.Secondary" Size="Size.Small" IsDisabled="!CanMoveBlockDown(block)" OnClick="@(() => MoveBlockDown(block))">
                    <i class="fas fa-arrow-down"></i>
                </BSButton>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public IContentItem Item { get; set; }

    private ObservableCollection<ContentBlock> Blocks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Blocks = new ObservableCollection<ContentBlock>(Item.Blocks.OrderBy(b => b.Position));
    }

    void AddBlock(string key, ContentBlock? neighbor = null, bool after = true)
    {
        var block = BRCEntitiesRegistrar.Instance().CreateBlock(key);
        if (block != null)
        {
            block.Id = Guid.NewGuid();
            var position = 0;
            if (neighbor != null)
            {
                position = after ? neighbor.Position + 1 : neighbor.Position;
            }
            Blocks.Insert(position, block);
            FillPositions();
    //StateHasChanged();
        }
    }

    private bool CanMoveBlockUp(ContentBlock block)
    {
        return block.Position > 0;
    }

    private bool CanMoveBlockDown(ContentBlock block)
    {
        return block.Position < Blocks.Count - 1;
    }

    private void MoveBlockUp(ContentBlock block)
    {
        if (CanMoveBlockUp(block))
        {
            UpdateIndex(block.Position - 1, block.Position);
        }
    }

    private void MoveBlockDown(ContentBlock block)
    {
        if (CanMoveBlockDown(block))
        {
            UpdateIndex(block.Position + 1, block.Position);
        }
    }

    private void UpdateIndex(int newIndex, int oldIndex)
    {
        Blocks.Move(oldIndex, newIndex);
        FillPositions();
    }

    private void FillPositions()
    {
        foreach (var block in Blocks)
        {
            block.Position = Blocks.IndexOf(block);
        }
        Item.Blocks = Blocks.ToList();
    }

    private async Task DeleteBlockAsync(ContentBlock block)
    {
        if (await DialogService.Confirm("Вы действительно хотите удалить это блок?", "Удаление блока", new ConfirmOptions
        {
            OkButtonText = "Удалить",
            CancelButtonText = "Отмена"
        }) == true)
        {
            Blocks.Remove(block);
            if (!Blocks.Any())
            {
                AddBlock(EntityExtensions.GetEntityDescriptor<TextBlock>().Key);
            }
            FillPositions();
        }
    }

}
