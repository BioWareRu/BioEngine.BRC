@using BioEngine.BRC.Core.Entities.Abstractions
@using BioEngine.BRC.Core.Entities
@using BioEngine.BRC.Admin.Extensions
@using System.Collections.ObjectModel
@using BioEngine.BRC.Core.Entities.Blocks
@inject IJSRuntime JsRuntime
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService

<div id="blocks-@Item.Id">
    @foreach (var block in Blocks)
    {
        <div style="display: flex; margin-bottom: 20px">
            <div style="width:30px; text-align: center">
                <i class="@block.GetIcon()" style="color: #999;"></i>
            </div>
            <div style="flex: 1; padding: 0 10px;">
                <BlockForm Block="block"></BlockForm>
            </div>
            <div style="width:30px; text-align: center; display: flex; flex-flow: column">
                <BSButton style="margin-bottom: 5px" Color="Color.Secondary" Size="Size.Small" IsDisabled="!CanMoveBlockUp(block)" OnClick="@(() => MoveBlockUp(block))">
                    <i class="fas fa-arrow-up"></i>
                </BSButton>
                <BSButton style="margin-bottom: 5px" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => DeleteBlockAsync(block))">
                    <i class="fas fa-trash"></i>
                </BSButton>
                <BSButton Color="Color.Secondary" Size="Size.Small" IsDisabled="!CanMoveBlockDown(block)" OnClick="@(() => MoveBlockDown(block))">
                    <i class="fas fa-arrow-down"></i>
                </BSButton>
            </div>
        </div>
    }
    <div class="dropdown" style="margin-bottom: 20px">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Добавить блок
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @foreach (var block in BRCEntitiesRegistrar.Instance().GetBlocks())
            {
                <a class="dropdown-item" href="#" @onclick="@(() => AddBlock(block.Key))" @onclick:preventDefault>
                    <i class="@block.GetIcon()"></i> @block.Title
                </a>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public IContentItem Item { get; set; }

    private ObservableCollection<ContentBlock> Blocks;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Blocks = new ObservableCollection<ContentBlock>(Item.Blocks.OrderBy(b => b.Position));
    }

    void AddBlock(string key)
    {
        var block = BRCEntitiesRegistrar.Instance().CreateBlock(key);
        Blocks.Add(block);
        FillPositions();
        StateHasChanged();
    }

    private bool CanMoveBlockUp(ContentBlock block)
    {
        return block.Position > 0;
    }

    private bool CanMoveBlockDown(ContentBlock block)
    {
        return block.Position < Blocks.Count - 1;
    }

    private void MoveBlockUp(ContentBlock block)
    {
        if (CanMoveBlockUp(block))
        {
            UpdateIndex(block.Position - 1, block.Position);
        }
    }

    private void MoveBlockDown(ContentBlock block)
    {
        if (CanMoveBlockDown(block))
        {
            UpdateIndex(block.Position + 1, block.Position);
        }
    }

    private void UpdateIndex(int newIndex, int oldIndex)
    {
        Blocks.Move(oldIndex, newIndex);
        FillPositions();
    }

    private void FillPositions()
    {
        foreach (var block in Blocks)
        {
            block.Position = Blocks.IndexOf(block);
        }
        Item.Blocks = Blocks.ToList();
    }

    private async Task DeleteBlockAsync(ContentBlock block)
    {
        if (await DialogService.Confirm("Вы действительно хотите удалить это блок?", "Удаление блока", new ConfirmOptions
        {
            OkButtonText = "Удалить",
            CancelButtonText = "Отмена"
        }) == true)
        {
            Blocks.Remove(block);
            if (!Blocks.Any())
            {
                AddBlock(null);
            }
            FillPositions();
        }
    }

}
